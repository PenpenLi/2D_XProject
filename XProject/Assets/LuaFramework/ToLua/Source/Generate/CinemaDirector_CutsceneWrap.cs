//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CinemaDirector_CutsceneWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CinemaDirector.Cutscene), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Optimize", Optimize);
		L.RegFunction("Play", Play);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Skip", Skip);
		L.RegFunction("Stop", Stop);
		L.RegFunction("UpdateCutscene", UpdateCutscene);
		L.RegFunction("PreviewPlay", PreviewPlay);
		L.RegFunction("ScrubToTime", ScrubToTime);
		L.RegFunction("SetRunningTime", SetRunningTime);
		L.RegFunction("EnterPreviewMode", EnterPreviewMode);
		L.RegFunction("ExitPreviewMode", ExitPreviewMode);
		L.RegFunction("Refresh", Refresh);
		L.RegFunction("GetTrackGroups", GetTrackGroups);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsDebug", get_IsDebug, null);
		L.RegVar("Duration", get_Duration, set_Duration);
		L.RegVar("State", get_State, null);
		L.RegVar("RunningTime", get_RunningTime, set_RunningTime);
		L.RegVar("TrackGroups", get_TrackGroups, null);
		L.RegVar("DirectorGroup", get_DirectorGroup, null);
		L.RegVar("CanOptimize", get_CanOptimize, set_CanOptimize);
		L.RegVar("IsSkippable", get_IsSkippable, set_IsSkippable);
		L.RegVar("IsLooping", get_IsLooping, set_IsLooping);
		L.RegVar("CutscenePlayed", get_CutscenePlayed, set_CutscenePlayed);
		L.RegVar("CutsceneFinished", get_CutsceneFinished, set_CutsceneFinished);
		L.RegVar("CutscenePaused", get_CutscenePaused, set_CutscenePaused);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Optimize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.Optimize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.Play();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.Pause();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Skip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.Skip();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCutscene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.UpdateCutscene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreviewPlay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.PreviewPlay();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrubToTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ScrubToTime(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRunningTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetRunningTime(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterPreviewMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.EnterPreviewMode();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExitPreviewMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.ExitPreviewMode();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Refresh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			obj.Refresh();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTrackGroups(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject<CinemaDirector.Cutscene>(L, 1);
			CinemaDirector.TrackGroup[] o = obj.GetTrackGroups();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDebug(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			bool ret = obj.IsDebug;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDebug on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			float ret = obj.Duration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			CinemaDirector.Cutscene.CutsceneState ret = obj.State;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RunningTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			float ret = obj.RunningTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RunningTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TrackGroups(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			CinemaDirector.TrackGroup[] ret = obj.TrackGroups;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TrackGroups on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DirectorGroup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			CinemaDirector.DirectorGroup ret = obj.DirectorGroup;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DirectorGroup on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanOptimize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			bool ret = obj.CanOptimize;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanOptimize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSkippable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			bool ret = obj.IsSkippable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSkippable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLooping(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			bool ret = obj.IsLooping;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsLooping on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CutscenePlayed(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(CinemaDirector.CutsceneHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CutsceneFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(CinemaDirector.CutsceneHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CutscenePaused(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(CinemaDirector.CutsceneHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Duration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RunningTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.RunningTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RunningTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CanOptimize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CanOptimize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanOptimize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsSkippable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsSkippable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSkippable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsLooping(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsLooping = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsLooping on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CutscenePlayed(IntPtr L)
	{
		try
		{
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject(L, 1, typeof(CinemaDirector.Cutscene));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CinemaDirector.Cutscene.CutscenePlayed' can only appear on the left hand side of += or -= when used outside of the type 'CinemaDirector.Cutscene'");
			}

			if (arg0.op == EventOp.Add)
			{
				CinemaDirector.CutsceneHandler ev = (CinemaDirector.CutsceneHandler)arg0.func;
				obj.CutscenePlayed += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CinemaDirector.CutsceneHandler ev = (CinemaDirector.CutsceneHandler)arg0.func;
				obj.CutscenePlayed -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CutsceneFinished(IntPtr L)
	{
		try
		{
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject(L, 1, typeof(CinemaDirector.Cutscene));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CinemaDirector.Cutscene.CutsceneFinished' can only appear on the left hand side of += or -= when used outside of the type 'CinemaDirector.Cutscene'");
			}

			if (arg0.op == EventOp.Add)
			{
				CinemaDirector.CutsceneHandler ev = (CinemaDirector.CutsceneHandler)arg0.func;
				obj.CutsceneFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CinemaDirector.CutsceneHandler ev = (CinemaDirector.CutsceneHandler)arg0.func;
				obj.CutsceneFinished -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CutscenePaused(IntPtr L)
	{
		try
		{
			CinemaDirector.Cutscene obj = (CinemaDirector.Cutscene)ToLua.CheckObject(L, 1, typeof(CinemaDirector.Cutscene));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CinemaDirector.Cutscene.CutscenePaused' can only appear on the left hand side of += or -= when used outside of the type 'CinemaDirector.Cutscene'");
			}

			if (arg0.op == EventOp.Add)
			{
				CinemaDirector.CutsceneHandler ev = (CinemaDirector.CutsceneHandler)arg0.func;
				obj.CutscenePaused += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CinemaDirector.CutsceneHandler ev = (CinemaDirector.CutsceneHandler)arg0.func;
				obj.CutscenePaused -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

