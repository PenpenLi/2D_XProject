//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_SceneStageManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.SceneStageManager), typeof(Manager));
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("LoadSceneViaPreloading", LoadSceneViaPreloading);
		L.RegFunction("LoadSceneChunk", LoadSceneChunk);
		L.RegFunction("CallFunction", CallFunction);
		L.RegFunction("UpdateSceneCameraSSAA", UpdateSceneCameraSSAA);
		L.RegFunction("OnCompleted", OnCompleted);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("loadingType", get_loadingType, set_loadingType);
		L.RegVar("curStage", get_curStage, null);
		L.RegVar("stageLoader", get_stageLoader, null);
		L.RegVar("NextSceneName", get_NextSceneName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.SceneStageManager));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.LoadScene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSceneViaPreloading(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.SceneStageManager));
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				obj.LoadSceneViaPreloading(arg0);
				return 0;
			}
			else if (count == 3)
			{
				LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.SceneStageManager));
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.LoadSceneViaPreloading(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.SceneStageManager.LoadSceneViaPreloading");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSceneChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.SceneStageManager));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.LoadSceneChunk(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
			LuaFramework.SceneStageManager.CallFunction(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateSceneCameraSSAA(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.SceneStageManager));
			obj.UpdateSceneCameraSSAA();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCompleted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.SceneStageManager));
			obj.OnCompleted();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loadingType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, LuaFramework.SceneStageManager.loadingType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curStage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)o;
			LuaInterface.LuaTable ret = obj.curStage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curStage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_stageLoader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)o;
			AL.Resources.LoadStageAsync ret = obj.stageLoader;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index stageLoader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NextSceneName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.SceneStageManager obj = (LuaFramework.SceneStageManager)o;
			string ret = obj.NextSceneName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NextSceneName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loadingType(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaFramework.SceneStageManager.loadingType = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

