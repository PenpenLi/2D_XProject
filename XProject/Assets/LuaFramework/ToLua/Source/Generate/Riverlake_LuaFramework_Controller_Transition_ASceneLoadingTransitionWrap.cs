//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Riverlake_LuaFramework_Controller_Transition_ASceneLoadingTransitionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnLoading", OnLoading);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ProcessAction", get_ProcessAction, set_ProcessAction);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLoading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition obj = (Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition)ToLua.CheckObject<Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition>(L, 1);
			System.Collections.IEnumerator o = obj.OnLoading();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProcessAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition obj = (Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition)o;
			System.Action<float> ret = obj.ProcessAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProcessAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProcessAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition obj = (Riverlake.LuaFramework.Controller.Transition.ASceneLoadingTransition)o;
			System.Action<float> arg0 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 2);
			obj.ProcessAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProcessAction on a nil value");
		}
	}
}

