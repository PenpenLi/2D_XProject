//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Riverlake_Resources_LoadStageAsyncWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Riverlake.Resources.LoadStageAsync), typeof(System.Object));
		L.RegFunction("AddLoader", AddLoader);
		L.RegFunction("AddRangeLoader", AddRangeLoader);
		L.RegFunction("Sort", Sort);
		L.RegFunction("MoveNext", MoveNext);
		L.RegFunction("OnActiveImmediate", OnActiveImmediate);
		L.RegFunction("IsSceneDone", IsSceneDone);
		L.RegFunction("IsDone", IsDone);
		L.RegFunction("Reset", Reset);
		L.RegFunction("New", _CreateRiverlake_Resources_LoadStageAsync);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Weight", get_Weight, null);
		L.RegVar("Progress", get_Progress, null);
		L.RegVar("SceneLoader", get_SceneLoader, null);
		L.RegVar("Current", get_Current, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateRiverlake_Resources_LoadStageAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Riverlake.Resources.LoadStageAsync obj = new Riverlake.Resources.LoadStageAsync();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Riverlake.Resources.LoadStageAsync obj = new Riverlake.Resources.LoadStageAsync(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Riverlake.Resources.LoadStageAsync.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLoader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			Riverlake.Resources.ALoadOperation arg0 = (Riverlake.Resources.ALoadOperation)ToLua.CheckObject<Riverlake.Resources.ALoadOperation>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.AddLoader(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRangeLoader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			Riverlake.Resources.ALoadOperation[] arg0 = ToLua.CheckObjectArray<Riverlake.Resources.ALoadOperation>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.AddRangeLoader(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			System.Collections.Generic.IComparer<Riverlake.Resources.LoadStageAsync.AsyncLoader> arg0 = (System.Collections.Generic.IComparer<Riverlake.Resources.LoadStageAsync.AsyncLoader>)ToLua.CheckObject<System.Collections.Generic.IComparer<Riverlake.Resources.LoadStageAsync.AsyncLoader>>(L, 2);
			obj.Sort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveNext(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			bool o = obj.MoveNext();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnActiveImmediate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			obj.OnActiveImmediate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSceneDone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			bool o = obj.IsSceneDone();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			bool o = obj.IsDone();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)ToLua.CheckObject<Riverlake.Resources.LoadStageAsync>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Weight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)o;
			int ret = obj.Weight;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Weight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SceneLoader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)o;
			Riverlake.Resources.SceneLoader ret = obj.SceneLoader;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SceneLoader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Current(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Riverlake.Resources.LoadStageAsync obj = (Riverlake.Resources.LoadStageAsync)o;
			object ret = obj.Current;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Current on a nil value");
		}
	}
}

