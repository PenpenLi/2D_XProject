//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDKInterfaceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDKInterface), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("GetSDKInfo", GetSDKInfo);
		L.RegFunction("Login", Login);
		L.RegFunction("Logout", Logout);
		L.RegFunction("ShowAccountCenter", ShowAccountCenter);
		L.RegFunction("SubmitGameData", SubmitGameData);
		L.RegFunction("SDKExit", SDKExit);
		L.RegFunction("OrderAndPay", OrderAndPay);
		L.RegFunction("IsSupportExit", IsSupportExit);
		L.RegFunction("IsSupportAccountCenter", IsSupportAccountCenter);
		L.RegFunction("IsSupportLogout", IsSupportLogout);
		L.RegFunction("IsIdentify", IsIdentify);
		L.RegFunction("IsAudlt", IsAudlt);
		L.RegFunction("GetMacAddr", GetMacAddr);
		L.RegFunction("GetIpAddr", GetIpAddr);
		L.RegFunction("reqOrder", reqOrder);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnLoginSuc", get_OnLoginSuc, set_OnLoginSuc);
		L.RegVar("OnLogout", get_OnLogout, set_OnLogout);
		L.RegVar("OnPaySuc", get_OnPaySuc, set_OnPaySuc);
		L.RegVar("OnGetSDKInfo", get_OnGetSDKInfo, set_OnGetSDKInfo);
		L.RegVar("sdkInit", get_sdkInit, set_sdkInit);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("GetSDKInfoHandler", SDKInterface_GetSDKInfoHandler);
		L.RegFunction("PaySucHandler", SDKInterface_PaySucHandler);
		L.RegFunction("LogoutHandler", SDKInterface_LogoutHandler);
		L.RegFunction("LoginSucHandler", SDKInterface_LoginSucHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSDKInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			obj.GetSDKInfo();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			obj.Login();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Logout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.Logout();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowAccountCenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.ShowAccountCenter();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubmitGameData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			ExtraGameData arg0 = (ExtraGameData)ToLua.CheckObject<ExtraGameData>(L, 2);
			obj.SubmitGameData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDKExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.SDKExit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OrderAndPay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			PayParams arg0 = (PayParams)ToLua.CheckObject<PayParams>(L, 2);
			obj.OrderAndPay(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.IsSupportExit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportAccountCenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.IsSupportAccountCenter();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportLogout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.IsSupportLogout();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsIdentify(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.IsIdentify();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAudlt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			bool o = obj.IsAudlt();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMacAddr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			string o = obj.GetMacAddr();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIpAddr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			string o = obj.GetIpAddr();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int reqOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDKInterface obj = (SDKInterface)ToLua.CheckObject<SDKInterface>(L, 1);
			PayParams arg0 = (PayParams)ToLua.CheckObject<PayParams>(L, 2);
			PayParams o = obj.reqOrder(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoginSuc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.LoginSucHandler ret = obj.OnLoginSuc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoginSuc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLogout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.LogoutHandler ret = obj.OnLogout;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLogout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPaySuc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.PaySucHandler ret = obj.OnPaySuc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnPaySuc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGetSDKInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.GetSDKInfoHandler ret = obj.OnGetSDKInfo;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnGetSDKInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sdkInit(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDKInterface.sdkInit);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, SDKInterface.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoginSuc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.LoginSucHandler arg0 = (SDKInterface.LoginSucHandler)ToLua.CheckDelegate<SDKInterface.LoginSucHandler>(L, 2);
			obj.OnLoginSuc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoginSuc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLogout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.LogoutHandler arg0 = (SDKInterface.LogoutHandler)ToLua.CheckDelegate<SDKInterface.LogoutHandler>(L, 2);
			obj.OnLogout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLogout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPaySuc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.PaySucHandler arg0 = (SDKInterface.PaySucHandler)ToLua.CheckDelegate<SDKInterface.PaySucHandler>(L, 2);
			obj.OnPaySuc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnPaySuc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGetSDKInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDKInterface obj = (SDKInterface)o;
			SDKInterface.GetSDKInfoHandler arg0 = (SDKInterface.GetSDKInfoHandler)ToLua.CheckDelegate<SDKInterface.GetSDKInfoHandler>(L, 2);
			obj.OnGetSDKInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnGetSDKInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sdkInit(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDKInterface.sdkInit = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDKInterface_GetSDKInfoHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDKInterface.GetSDKInfoHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDKInterface.GetSDKInfoHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDKInterface_PaySucHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDKInterface.PaySucHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDKInterface.PaySucHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDKInterface_LogoutHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDKInterface.LogoutHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDKInterface.LogoutHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDKInterface_LoginSucHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDKInterface.LoginSucHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDKInterface.LoginSucHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

